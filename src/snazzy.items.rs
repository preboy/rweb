// This file is @generated by prost-build.
/// A snazzy new shirt!
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Shirt {
    /// The base color
    #[prost(string, tag = "1")]
    pub color: ::prost::alloc::string::String,
    /// The size as stated on the label
    #[prost(enumeration = "shirt::Size", tag = "2")]
    pub size: i32,
}
/// Nested message and enum types in `Shirt`.
pub mod shirt {
    /// this is a comment
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Student {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(bool, tag = "2")]
        pub male: bool,
        #[prost(int32, repeated, tag = "3")]
        pub scores: ::prost::alloc::vec::Vec<i32>,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MapRequest {
        #[prost(map = "string, int32", tag = "1")]
        pub points: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    }
    /// Label sizes
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Size {
        Small = 0,
        Medium = 1,
        Large = 2,
    }
    impl Size {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Small => "SMALL",
                Self::Medium => "MEDIUM",
                Self::Large => "LARGE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SMALL" => Some(Self::Small),
                "MEDIUM" => Some(Self::Medium),
                "LARGE" => Some(Self::Large),
                _ => None,
            }
        }
    }
}
